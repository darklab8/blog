package favourite

import (
    "darklab_blog/blog/common"
    "darklab_blog/blog/archive"
	"darklab_blog/blog/common/types"
)

type BookParams struct {
    name string
    shop_url string
    url_cover string
}
func NewBookParams(
    name string,
    shop_url string,
    url_cover string,
) *BookParams {
    return &BookParams{
        name: name,
        shop_url: shop_url,
        url_cover: url_cover,
    }
}

templ Book(params *BookParams) {
    <a href={ templ.URL(params.shop_url) }><h3>{ params.name }</h3></a>
    <div class="book_description">
        <a href={ templ.URL(params.shop_url) }><img class="book_element" src={ params.url_cover }/></a>
        <p class="book_element">
            { children... }
        </p>
    </div>
    
}

templ PageT() {
	@common.Html5(common.Title("Favourite")) {
		@common.BlogFrame() {
			@common.Menu()
            <style>
            .book_description img {
                max-width: 200px;
                max-height: 200px;
                float: left;
            }
            .book_element {
                margin: 15px;
            }
            .section_header {
                font-size: 1.4em;
            }
            hr {
                border-color: gray;
            }
            </style>
            @common.TextHeaderMain(){
                Books
            }
            Books that I certainly recommend for reading
            @common.SectionHeader("Core software engineering")

            @Book(NewBookParams(
                    "Code Complete: A Practical Handbook of Software Construction",
                    "https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670",
                    types.GetCtx(ctx).StaticRoot + "favourite/61GzazUmKyL._SL1462_.jpg",
                )){
                <p>
                    If i could recommend to read only a single book in entire life, that would be this one.
                    It is very all encompasing book covering a lot of aspects of software development.
                    Some of them in more than enough capacity.
                    Some of them is showing only briefly and redirecting to where to learn them further.
                    With this book u will have much clear picture that there is still a lot to learn ahead.
                    It has plenty of recommendations what to read next.
                </p>
                <p>
                    Despite it being written in 2004 year as second edition, it still remains relevant for 98%+ of its text.
                    With reading its material you will learn reusable skills that will remain persistent through your full career.
                    it will help you to write more cleaner, more readable and maintainable code in any programming language.
                    It will help you to understand possible goals in development to aim for, and what you could be missing to code with more efficiency.
                </p>
            }

            @Book(NewBookParams(
                    "Unit Testing Principles, Practices, and Patterns",
                    "https://www.amazon.com/Unit-Testing-Principles-Practices-Patterns/dp/1617296279",
                    types.GetCtx(ctx).StaticRoot + "favourite/81K8dwbaenL._SY466_.jpg",
                )){
                <p>
                    This book teaches theory behind unit testing. For which goals to aim for, how to escape pitifals.
                    It will explain you importance of unit testing and what kind of testing exists. This book is important to
                    weaponize your skills to an average commercial level development.
                </p>
            }
            @Book(NewBookParams(
                    "Test Driven Development: By Example",
                    "https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530",
                    types.GetCtx(ctx).StaticRoot + "favourite/61a+MLItPHL._SY466_.jpg",
                )){
                <p>
                    This book teaches practice behind unit testing. On a specific example it walks you through how to
                    have unit testing as part of your development cycle at every moment. It teaches you feeling how much gap between
                    tests is allowed in your working code.
                </p>
            }
            @Book(NewBookParams(
                    "Clean Architecture: A Craftsman's Guide",
                    "https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164",
                    types.GetCtx(ctx).StaticRoot + "favourite/61r4tYVsRVL._SL1304_.jpg",
                )){
                <p>
                    This book helps to have a global look onto code design of a single application.
                    It helped me in achieving a necessary view for designing libraries.
                </p>
            }
            @Book(NewBookParams(
                    "Systems Analysis and Design",
                    "https://www.amazon.com/Systems-Analysis-Design-Alan-Dennis/dp/1119803780",
                    types.GetCtx(ctx).StaticRoot + "favourite/81AfTuXCNjL._SL1500_.jpg",
                )){
                <p>
                    The book makes walk through steps of Software Development Lifecycle. From getting approved draft, gathering requirements for its functional and technical requirements,
                    to working with user usage case scenarios, designing database, infrastructure and application development.
                    You can save a ton of time, with refactoring the design of application before a single code line was written.
                </p>
            }
            <hr/>
            @common.SectionHeader("DevOps")
            @Book(NewBookParams(
                    "Docker Deep Dive",
                    "https://www.amazon.com/Docker-Deep-Dive-Nigel-Poulton/dp/1916585256",
                    types.GetCtx(ctx).StaticRoot + "favourite/61K0mUALVAL._SL1360_.jpg",
                )){
                <p>
                    Structured learning of docker. Important thing for any DevOps engineer, Backend developer or any other job role dealing
                    with web applications and their related ecosystem of databases and other stuff. Docker is helping to document as a code your
                    web application building and freeze entire everything needed for its running. Containers became standard for immutable deployments,
                    and with learning docker you will make your app compatible with modern ecosystem and get ability for easier rollback to previous version.
                </p>
            }
            @Book(NewBookParams(
                    "The Kubernetes Book",
                    "https://www.amazon.com/Kubernetes-Book-Version-November-2018-ebook/dp/B072TS9ZQZ",
                    types.GetCtx(ctx).StaticRoot + "favourite/71lxeRFPYLL._SL1500_.jpg",
                )){
                <p>
                    In case u need jump start in learning kubernetes this book is for you.
                    From same author as Docker Deep Dive. a structured dive into k8s.
                </p>
            }
            @Book(NewBookParams(
                    "Terraform up and runnning",
                    "https://www.amazon.com/Terraform-Running-Writing-Infrastructure-Code/dp/1098116747",
                    types.GetCtx(ctx).StaticRoot + "favourite/81TuTt5Sz3L._SL1500_.jpg",
                )){
                <p>
                    This book teaches you instrument to automate all actions of dealing with cloud providers, like AWS / GCP / Azure.
                    Without terraform or pulumi it is not very recommended diving into them, for a reason of a high complexity to tune all things.
                    Infrastructure as a code changes things and helps to utilize the power of such cloud providers in a comfortable way.
                </p>

                <p>
                    P.S. this book is AWS oriented, but its material will be useful for you for any cloud provider.
                    Also recommending learning terraform first instead of kubernetes, as it is covering more necessary things first, from setting up servers,
                    to configuring networks, iam permissions, security groups to managed databases and other gazillion of moden cloud services.
                </p>
            }

            @common.TextHeaderMain(){
                Articles
            }
            <p>
                <ul>
                    
                    @common.TextLink("https://grugbrain.dev/"){
                         <li>Grug brain development</li>
                    }
                     @common.TextLink("https://12factor.net/"){
                         <li>The twelve-factor app</li>
                    }
                    @common.TextLink("https://htmx.org/essays/locality-of-behaviour/"){
                        <li>Locality</li>
                    }
                    @archive.LinkT(archive.LinkTypeSafety) {
                        <li>Type safety</li>
                    }
                    @common.TextLink("https://gist.github.com/chitchcock/1281611"){
                        <li>About platforms</li>
                    }
                </ul>
            </p>
        }
    }
}