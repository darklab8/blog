apiVersion: 1

# for docker-compose deployment only. Terraform way can do the same via Grafana provider
datasources:
  - name: Loki
    type: loki
    uid: loki
    access: proxy
    url: http://loki:3100
    isDefault: false
    basicAuth: false
    jsonData:
      timeout: 60
      maxLines: 5000
      tlsSkipVerify: true
      derivedFields:
        # this part for our future Tracing Tempos system
        # in order to find traces from trace id in logs
        - datasourceUid: tempo
          matcherRegex: trace_id
          name: trace_id
          url: "${__value.raw}" # one $ or two $$ in yaml format? verify
          urlDisplayLabel: "trace_id"
          matcherType: label
# To avoid code repetions for Grafana GUI configurations in next articles, we have to fill data sources
# for following up configurations later in advance
  - name: Prometheus
    type: prometheus
    uid: prometheus-datasource
    access: proxy
    url: http://prometheus:9090
    basicAuth: false
    jsonData:
      httpMethod: GET
      exemplarTraceIdDestinations:
        - datasourceUid: tempo-datasource
          name: traceID
  - name: Alertmanager
    type: alertmanager
    uid: P7647F508D5F54FCB
    access: proxy
    url: http://localhost:9093
    basicAuth: false
    jsonData:
      implementation: prometheus
      handleGrafanaManagedAlerts: true
  - name: Tempo
    type: tempo
    uid: tempo-datasource
    access: proxy
    url: http://tempo:3200
    basicAuth: false
    jsonData:
      httpMethod: GET
      serviceMap:
        datasourceUid: prometheus-datasource
      tracesToLogsV2:
        customQuery: false
        datasourceUid: loki-datasource
        spanStartTimeShift: "-1h"
        spanEndTimeShift: "1h"
        filterByTraceID: true
      tracesToMetrics:
        datasourceUid: prometheus-datasource
        queries: []
