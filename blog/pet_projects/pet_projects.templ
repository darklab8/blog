package pet_projects


import (
	"github.com/darklab8/blog/blog/common"
	"github.com/darklab8/blog/blog/common/types"
	"github.com/darklab8/blog/blog/pet_projects/pet_projects_urls"
	"github.com/darklab8/blog/blog/common/urls"
)

type Link struct {
	name string
	url string
}

type PetProject struct {
	name string
	id string
	footer_links []Link
}

type ProjectOption func(b *PetProject)


func NewPetProject(name string, id string, opts ...ProjectOption) *PetProject {
	p := &PetProject{
		name: name,
		id: id,
	}
	for _, opt := range opts {
		opt(p)
	}

	return p
}

func WithLink(name string ,url string) ProjectOption {
	return func(b *PetProject) {
		b.footer_links = append(b.footer_links, Link{
			name: name,
			url: url,
		})
	}
}

func WithGithub(url string) ProjectOption {
	return WithLink("github", url)
}

func WithArticle(url string) ProjectOption {
	return WithLink("article", url)
}

templ PetProjectRender(project *PetProject) {
	<div id={ project.id } class="pet_project">
	<h2>{ project.name }</h2>
	{ children... }
	</div>
	<p>
	for _, link := range project.footer_links {
		<a style="margin-right: 20px;" href={ templ.URL(link.url) }>{ link.name }</a>
	}
	</p>
}

templ ProjectsShared() {
	<style>
	hr {
		margin-top: 30px;
		margin-bottom: 30px;
	}
	</style>
}

templ PetProjectsT() {
	@common.Html5(common.Title("Pet projects")) {
		@common.BlogFrame() {
			@common.Menu()
			@ProjectsShared()
			@common.SectionHeader("Tooling")
			@PetProjectRender(
				NewPetProject(
					"Autogit - Git conventional commits linter",
					"autogit",
					WithGithub(pet_projects_urls.Autogit),
					WithArticle(types.GetCtx(ctx).SiteRoot + urls.ArticleGitConventionalCommits),
				),
			) {
				<img style="width: 200px; height: 200px; float: right; margin: 0px 15px 15px 15px;" src={ types.GetCtx(ctx).StaticRoot + "pet_projects/autogit_logo.png" } alt="autogit logo"/>
				@common.TextBlock(){
					The instrument to enforce git conventional commits to submitted commits through git hooks. CI friendly and without any dependencies.
					Based on submitted commits generates changelogs for releases and suggests next semantic version of a release.
					Based on quickly observable feedback from generated changelog, the tool encourages writing better commits further.
    			}
				@common.TextBlock(){
					The goal of the tool is to decrease toal on writing documentation,
					and achieving better communication between project maintainers and its end users with minimal effort.
					As convinient side effect, it will make your repositories more professionally looking,
					because it encourages you making descriptive commits/tags/releases ^_^.
				}
				
			}
			@PetProjectRender(
				NewPetProject(
					"Typelog - Typed structured logging",
					"typelog",
					WithLink("golang github",pet_projects_urls.GoTypelog),
					WithLink("python github", pet_projects_urls.PyTypelog),
					WithArticle(types.GetCtx(ctx).SiteRoot + urls.ArticleTypelog),
				),
				
			) {
				<img style="width: 200px; height: 200px; float: right; margin: 0px 15px 15px 15px;" src={ types.GetCtx(ctx).StaticRoot + "typelog/typelog.png"} alt="autogit logo"/>
				@common.TextBlock(){
					Brings easy refactorable jsonable logs, context rich with key values.
					JSON format is important for modern logging ecosystems as it is parsable out of the box without any regex.
					Context rich by types logs with uniform kept keys across the code, help to keep clean Domain language across an application
					and easily refactoring in one command.
					Libraries were ensured to try being written in the way were we at maximum protect ourserlves from pressence of `Any` stuff
					and therefore accidental shooting into our own foots. Exists in golang and python versions.
    			}				
			}
			<hr/>
			@common.SectionHeader("Personal")
			@PetProjectRender(
				NewPetProject(
					"Blog - static site generator",
					"blog",
					WithGithub(pet_projects_urls.Blog),
				),
			) {
				@common.TextBlock(){
					Personal web site.
    			}
				@common.TextBlock(){
					For comfortable way with having everything auto validated,
					<a href="https://github.com/a-h/templ">templ go</a> is used to generate static assets of the site.
					To simplify articles writing further markdown transpiling to html was added and augmented by golang text/template.
					The made choices helped to achieve 100% customization to any design desires.
					Fairly small amount of dependencies should help for long term maintenance of the project, as it is aimed for many years of life.
				}
				
			}
			<hr/>
			@common.SectionHeader("Discovery Freelancer community")
			@PetProjectRender(
				NewPetProject(
					"Fldarkbot - Discord bot to track game objects",
					"fldarkbot",
					WithGithub("https://github.com/darklab8/fl-darkbot"),
					WithLink("wiki", "https://darklab8.github.io/fl-darkbot/"),
					WithLink("forum", "https://discoverygc.com/forums/showthread.php?tid=188040"),
				),
			) {
				@common.TextBlock(){
					Discord bot implemented for game community Freelancer Discovery.
					The bot offers tracking game entities like Players, Bases, Forum records in Discord.
    			}
				<img src="https://github.com/darklab8/fl-darkbot/raw/master/docs/index_assets/base_render2.png" />
				@common.TextBlock(){
					The project is made high coverage unit testable, through minimizing footprint of
					Discord pressence to a very small isolated code places. Input out of Discord is intercepted and redirect to be handled by
					<a href="https://github.com/spf13/cobra">Cobra CLI</a>. The action is handled and rendered by CLI back.
					Thus we have full unit testing local capability for majority of functionality without requirement for any end-to-end testing shenanigans.
				}
			}
			<hr/>
			@PetProjectRender(
				NewPetProject(
					"Fldarklint - Linter for game configs",
					"fldarklint",
					WithGithub("https://github.com/darklab8/darklab_fldarklint"),
					WithLink("forum", "https://discoverygc.com/forums/showthread.php?tid=195174"),
				),
			) {
				@common.TextBlock(){
					Inspired by python black formatter, it formats Freelancer config files to uniform way.
    			}
				@common.TextBlock(){
					Developers of Freelancer mods make changes to file configs directly.
					As extra features it was originally made to denormalize data and having available human readable namings to config entities.
				}
				<img style="max-width: 100%;" src="https://github.com/darklab8/darklab_fldarklint/raw/master/docs/assets/diff_example.png" />
			}
			<hr/>
			@PetProjectRender(
				NewPetProject(
					"Flconfigs - ORM to access game data",
					"flconfig",
					WithGithub("https://github.com/darklab8/fl-configs"),
				),
			) {
				@common.TextBlock(){
					ORM for reading game config files data and writing it back without an effort to write code for file writing.
					The ORM provides static typed access to the data, the code is abe to distinguish int/str/float types. 
					The project is reused as library for Fldarklint and Fldarkstat.
    			}
			}

			<div style="display: flex; justify-content: center;">
				<p>
					<a href={ templ.URL(types.GetCtx(ctx).SiteRoot + urls.PetProjectsIdeas) }>future ideas</a>
				</p>
			</div>
		} 
	}
}